{
	"name": "csvandparquetformatsink",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SQLCountrySource",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SQLHappinessSource",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "Record",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "join2"
				},
				{
					"name": "select1"
				},
				{
					"name": "window1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "join3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          images_file as string,",
				"          image_url as string,",
				"          {alpha-2} as string,",
				"          {alpha-3} as string,",
				"          {country-code} as long,",
				"          {iso_3166-2} as string,",
				"          region as string,",
				"          {sub-region} as string,",
				"          {intermediate-region} as string,",
				"          {region-code} as long,",
				"          {sub-region-code} as long,",
				"          {intermediate-region-code} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          Country as string,",
				"          Score as string,",
				"          {GDP per capita} as string,",
				"          {Social support} as string,",
				"          {Healthy life expectancy} as string,",
				"          {Freedom to make life choices} as string,",
				"          Generosity as string,",
				"          {Perceptions of corruption} as string,",
				"          year as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1 derive({Upper Case Region} = upper(region)) ~> derivedColumn1",
				"source2 derive(Score = toFloat(Score)) ~> derivedColumn2",
				"derivedColumn2, derivedColumn1 join(source2@Country == source1@country,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> join1",
				"join3 derive({Happiness Status} = case(Score > 5.6, \"green\", case(Score < 2.6, \"Red\", case(Score<= 5.6 && Score >= 2.6, \"Amber\")))) ~> derivedColumn3",
				"window1, join1 join(aggregate1@year == source2@year",
				"     && aggregate1@region == source1@region,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> join2",
				"derivedColumn3 select(mapColumn(",
				"          {Rank Per Region},",
				"          {GDP per capita},",
				"          {Social support},",
				"          {Healthy life expectancy},",
				"          {Freedom to make life choices},",
				"          Generosity,",
				"          {Perceptions of corruption},",
				"          year = source2@year,",
				"          image_url,",
				"          region = source1@region,",
				"          {region-code},",
				"          {Happiness Status},",
				"          {Happiness Score} = Score,",
				"          {Rank Per Region},",
				"          {Overall Rank}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"aggregate1 window(over(SumScoreRegionYear),",
				"     {Rank Per Region} = denseRank()) ~> window1",
				"join1 aggregate(groupBy(year,",
				"          region),",
				"     SumScoreRegionYear = sum(Score)) ~> aggregate1",
				"join1 aggregate(groupBy(year),",
				"     {Overall Rank} = sum(Score)) ~> aggregate2",
				"aggregate2, join2 join(aggregate2@year == source2@year,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> join3",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Country as string,",
				"          Score as string,",
				"          {GDP per capita} as string,",
				"          {Social support} as string,",
				"          {Healthy life expectancy} as string,",
				"          {Freedom to make life choices} as string,",
				"          Generosity as string,",
				"          {Perceptions of corruption} as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3"
			]
		}
	}
}