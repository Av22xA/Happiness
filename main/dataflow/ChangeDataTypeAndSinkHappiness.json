{
	"name": "ChangeDataTypeAndSinkHappiness",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText3_copy1",
						"type": "DatasetReference"
					},
					"name": "HappinessCSV"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Json2",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "Json2",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "AddColumns"
				},
				{
					"name": "rank1"
				},
				{
					"name": "window1"
				},
				{
					"name": "window2"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     ParamYear as integer",
				"}",
				"source(output(",
				"          Country as string,",
				"          Score as double,",
				"          {GDP per capita} as double,",
				"          {Social support} as double,",
				"          {Healthy life expectancy} as double,",
				"          {Freedom to make life choices} as double,",
				"          Generosity as double,",
				"          {Perceptions of corruption} as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> HappinessCSV",
				"HappinessCSV derive(Year = $ParamYear) ~> AddColumns",
				"AddColumns rank(asc(Score, true),",
				"     output(Score as long),",
				"     dense: true) ~> rank1",
				"rank1 window({Highest Rank} = max(denseRank()),",
				"          {Lowest Rank} = min(denseRank()),",
				"          {Highest Happiness Score} = max(Score),",
				"          {Lowest Happiness Score} = min(Score)) ~> window1",
				"rank1 window(over(Score),",
				"     {Highest Rank} = max(denseRank()),",
				"          {Lowest Rank} = min(denseRank()),",
				"          {Highest Happiness Score} = max(Score),",
				"          {Lowest Happiness Score} = min(Score)) ~> window2",
				"window1 select(mapColumn(",
				"          Country,",
				"          Score,",
				"          {GDP per capita},",
				"          {Social support},",
				"          {Healthy life expectancy},",
				"          {Freedom to make life choices},",
				"          Generosity,",
				"          {Perceptions of corruption},",
				"          Year",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          country as string,",
				"          images_file as string,",
				"          image_url as string,",
				"          {alpha-2} as string,",
				"          {alpha-3} as string,",
				"          {country-code} as integer,",
				"          {iso_3166-2} as string,",
				"          region as string,",
				"          {sub-region} as string,",
				"          {intermediate-region} as string,",
				"          {region-code} as integer,",
				"          {sub-region-code} as integer,",
				"          {intermediate-region-code} as integer",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2",
				"window2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          country as string,",
				"          images_file as string,",
				"          image_url as string,",
				"          {alpha-2} as string,",
				"          {alpha-3} as string,",
				"          {country-code} as integer,",
				"          {iso_3166-2} as string,",
				"          region as string,",
				"          {sub-region} as string,",
				"          {intermediate-region} as string,",
				"          {region-code} as integer,",
				"          {sub-region-code} as integer,",
				"          {intermediate-region-code} as integer",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3"
			]
		}
	}
}